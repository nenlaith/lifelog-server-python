# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Consumable(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, consumable_type: str=None, consumable_added_fat: float=0.0, consumable_carbohydrate: float=0.0, consumable_quantity: float=None):  # noqa: E501
        """Consumable - a model defined in Swagger

        :param consumable_type: The consumable_type of this Consumable.  # noqa: E501
        :type consumable_type: str
        :param consumable_added_fat: The consumable_added_fat of this Consumable.  # noqa: E501
        :type consumable_added_fat: float
        :param consumable_carbohydrate: The consumable_carbohydrate of this Consumable.  # noqa: E501
        :type consumable_carbohydrate: float
        :param consumable_quantity: The consumable_quantity of this Consumable.  # noqa: E501
        :type consumable_quantity: float
        """
        self.swagger_types = {
            'consumable_type': str,
            'consumable_added_fat': float,
            'consumable_carbohydrate': float,
            'consumable_quantity': float
        }

        self.attribute_map = {
            'consumable_type': 'consumable_type',
            'consumable_added_fat': 'consumable_added_fat',
            'consumable_carbohydrate': 'consumable_carbohydrate',
            'consumable_quantity': 'consumable_quantity'
        }
        self._consumable_type = consumable_type
        self._consumable_added_fat = consumable_added_fat
        self._consumable_carbohydrate = consumable_carbohydrate
        self._consumable_quantity = consumable_quantity

    @classmethod
    def from_dict(cls, dikt) -> 'Consumable':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Consumable of this Consumable.  # noqa: E501
        :rtype: Consumable
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumable_type(self) -> str:
        """Gets the consumable_type of this Consumable.


        :return: The consumable_type of this Consumable.
        :rtype: str
        """
        return self._consumable_type

    @consumable_type.setter
    def consumable_type(self, consumable_type: str):
        """Sets the consumable_type of this Consumable.


        :param consumable_type: The consumable_type of this Consumable.
        :type consumable_type: str
        """

        self._consumable_type = consumable_type

    @property
    def consumable_added_fat(self) -> float:
        """Gets the consumable_added_fat of this Consumable.


        :return: The consumable_added_fat of this Consumable.
        :rtype: float
        """
        return self._consumable_added_fat

    @consumable_added_fat.setter
    def consumable_added_fat(self, consumable_added_fat: float):
        """Sets the consumable_added_fat of this Consumable.


        :param consumable_added_fat: The consumable_added_fat of this Consumable.
        :type consumable_added_fat: float
        """
        if consumable_added_fat is None:
            raise ValueError("Invalid value for `consumable_added_fat`, must not be `None`")  # noqa: E501

        self._consumable_added_fat = consumable_added_fat

    @property
    def consumable_carbohydrate(self) -> float:
        """Gets the consumable_carbohydrate of this Consumable.

        quantity in [g] for 100g or 100mL  # noqa: E501

        :return: The consumable_carbohydrate of this Consumable.
        :rtype: float
        """
        return self._consumable_carbohydrate

    @consumable_carbohydrate.setter
    def consumable_carbohydrate(self, consumable_carbohydrate: float):
        """Sets the consumable_carbohydrate of this Consumable.

        quantity in [g] for 100g or 100mL  # noqa: E501

        :param consumable_carbohydrate: The consumable_carbohydrate of this Consumable.
        :type consumable_carbohydrate: float
        """
        if consumable_carbohydrate is None:
            raise ValueError("Invalid value for `consumable_carbohydrate`, must not be `None`")  # noqa: E501

        self._consumable_carbohydrate = consumable_carbohydrate

    @property
    def consumable_quantity(self) -> float:
        """Gets the consumable_quantity of this Consumable.

        quantity in [g] or [mL]  # noqa: E501

        :return: The consumable_quantity of this Consumable.
        :rtype: float
        """
        return self._consumable_quantity

    @consumable_quantity.setter
    def consumable_quantity(self, consumable_quantity: float):
        """Sets the consumable_quantity of this Consumable.

        quantity in [g] or [mL]  # noqa: E501

        :param consumable_quantity: The consumable_quantity of this Consumable.
        :type consumable_quantity: float
        """

        self._consumable_quantity = consumable_quantity
