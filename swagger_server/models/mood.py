# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.day_descriptor import DayDescriptor  # noqa: F401,E501
from swagger_server import util


class Mood(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, element_type: str='day_descriptor', day_descriptor_date: date=None, day_descriptor_type: str='mood', mood_description: str=None, mood_anxiousness: int=None, mood_depress: int=None):  # noqa: E501
        """Mood - a model defined in Swagger

        :param element_type: The element_type of this Mood.  # noqa: E501
        :type element_type: str
        :param day_descriptor_date: The day_descriptor_date of this Mood.  # noqa: E501
        :type day_descriptor_date: date
        :param day_descriptor_type: The day_descriptor_type of this Mood.  # noqa: E501
        :type day_descriptor_type: str
        :param mood_description: The mood_description of this Mood.  # noqa: E501
        :type mood_description: str
        :param mood_anxiousness: The mood_anxiousness of this Mood.  # noqa: E501
        :type mood_anxiousness: int
        :param mood_depress: The mood_depress of this Mood.  # noqa: E501
        :type mood_depress: int
        """
        self.swagger_types = {
            'element_type': str,
            'day_descriptor_date': date,
            'day_descriptor_type': str,
            'mood_description': str,
            'mood_anxiousness': int,
            'mood_depress': int
        }

        self.attribute_map = {
            'element_type': 'element_type',
            'day_descriptor_date': 'day_descriptor_date',
            'day_descriptor_type': 'day_descriptor_type',
            'mood_description': 'mood_description',
            'mood_anxiousness': 'mood_anxiousness',
            'mood_depress': 'mood_depress'
        }
        self._element_type = element_type
        self._day_descriptor_date = day_descriptor_date
        self._day_descriptor_type = day_descriptor_type
        self._mood_description = mood_description
        self._mood_anxiousness = mood_anxiousness
        self._mood_depress = mood_depress

    @classmethod
    def from_dict(cls, dikt) -> 'Mood':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Mood of this Mood.  # noqa: E501
        :rtype: Mood
        """
        return util.deserialize_model(dikt, cls)

    @property
    def element_type(self) -> str:
        """Gets the element_type of this Mood.


        :return: The element_type of this Mood.
        :rtype: str
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type: str):
        """Sets the element_type of this Mood.


        :param element_type: The element_type of this Mood.
        :type element_type: str
        """

        self._element_type = element_type

    @property
    def day_descriptor_date(self) -> date:
        """Gets the day_descriptor_date of this Mood.


        :return: The day_descriptor_date of this Mood.
        :rtype: date
        """
        return self._day_descriptor_date

    @day_descriptor_date.setter
    def day_descriptor_date(self, day_descriptor_date: date):
        """Sets the day_descriptor_date of this Mood.


        :param day_descriptor_date: The day_descriptor_date of this Mood.
        :type day_descriptor_date: date
        """
        if day_descriptor_date is None:
            raise ValueError("Invalid value for `day_descriptor_date`, must not be `None`")  # noqa: E501

        self._day_descriptor_date = day_descriptor_date

    @property
    def day_descriptor_type(self) -> str:
        """Gets the day_descriptor_type of this Mood.


        :return: The day_descriptor_type of this Mood.
        :rtype: str
        """
        return self._day_descriptor_type

    @day_descriptor_type.setter
    def day_descriptor_type(self, day_descriptor_type: str):
        """Sets the day_descriptor_type of this Mood.


        :param day_descriptor_type: The day_descriptor_type of this Mood.
        :type day_descriptor_type: str
        """

        self._day_descriptor_type = day_descriptor_type

    @property
    def mood_description(self) -> str:
        """Gets the mood_description of this Mood.


        :return: The mood_description of this Mood.
        :rtype: str
        """
        return self._mood_description

    @mood_description.setter
    def mood_description(self, mood_description: str):
        """Sets the mood_description of this Mood.


        :param mood_description: The mood_description of this Mood.
        :type mood_description: str
        """
        if mood_description is None:
            raise ValueError("Invalid value for `mood_description`, must not be `None`")  # noqa: E501

        self._mood_description = mood_description

    @property
    def mood_anxiousness(self) -> int:
        """Gets the mood_anxiousness of this Mood.


        :return: The mood_anxiousness of this Mood.
        :rtype: int
        """
        return self._mood_anxiousness

    @mood_anxiousness.setter
    def mood_anxiousness(self, mood_anxiousness: int):
        """Sets the mood_anxiousness of this Mood.


        :param mood_anxiousness: The mood_anxiousness of this Mood.
        :type mood_anxiousness: int
        """
        if mood_anxiousness is None:
            raise ValueError("Invalid value for `mood_anxiousness`, must not be `None`")  # noqa: E501

        self._mood_anxiousness = mood_anxiousness

    @property
    def mood_depress(self) -> int:
        """Gets the mood_depress of this Mood.


        :return: The mood_depress of this Mood.
        :rtype: int
        """
        return self._mood_depress

    @mood_depress.setter
    def mood_depress(self, mood_depress: int):
        """Sets the mood_depress of this Mood.


        :param mood_depress: The mood_depress of this Mood.
        :type mood_depress: int
        """
        if mood_depress is None:
            raise ValueError("Invalid value for `mood_depress`, must not be `None`")  # noqa: E501

        self._mood_depress = mood_depress
