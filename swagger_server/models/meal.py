# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.consumable_mixin import Consumable  # noqa: F401,E501
from swagger_server.models.event import Event  # noqa: F401,E501
from swagger_server import util


class Meal(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, consumable_type: str='solid', consumable_added_fat: float=0.0, consumable_carbohydrate: float=0.0, consumable_quantity: float=None, element_type: str='event', event_timestamp: datetime=None, event_type: str='meal', meal_parent: str=None, meal_category: str=None, meal_description: str=None):  # noqa: E501
        """Meal - a model defined in Swagger

        :param consumable_type: The consumable_type of this Meal.  # noqa: E501
        :type consumable_type: str
        :param consumable_added_fat: The consumable_added_fat of this Meal.  # noqa: E501
        :type consumable_added_fat: float
        :param consumable_carbohydrate: The consumable_carbohydrate of this Meal.  # noqa: E501
        :type consumable_carbohydrate: float
        :param consumable_quantity: The consumable_quantity of this Meal.  # noqa: E501
        :type consumable_quantity: float
        :param element_type: The element_type of this Meal.  # noqa: E501
        :type element_type: str
        :param event_timestamp: The event_timestamp of this Meal.  # noqa: E501
        :type event_timestamp: datetime
        :param event_type: The event_type of this Meal.  # noqa: E501
        :type event_type: str
        :param meal_parent: The meal_parent of this Meal.  # noqa: E501
        :type meal_parent: str
        :param meal_category: The meal_category of this Meal.  # noqa: E501
        :type meal_category: str
        :param meal_description: The meal_description of this Meal.  # noqa: E501
        :type meal_description: str
        """
        self.swagger_types = {
            'consumable_type': str,
            'consumable_added_fat': float,
            'consumable_carbohydrate': float,
            'consumable_quantity': float,
            'element_type': str,
            'event_timestamp': datetime,
            'event_type': str,
            'meal_parent': str,
            'meal_category': str,
            'meal_description': str
        }

        self.attribute_map = {
            'consumable_type': 'consumable_type',
            'consumable_added_fat': 'consumable_added_fat',
            'consumable_carbohydrate': 'consumable_carbohydrate',
            'consumable_quantity': 'consumable_quantity',
            'element_type': 'element_type',
            'event_timestamp': 'event_timestamp',
            'event_type': 'event_type',
            'meal_parent': 'meal_parent',
            'meal_category': 'meal_category',
            'meal_description': 'meal_description'
        }
        self._consumable_type = consumable_type
        self._consumable_added_fat = consumable_added_fat
        self._consumable_carbohydrate = consumable_carbohydrate
        self._consumable_quantity = consumable_quantity
        self._element_type = element_type
        self._event_timestamp = event_timestamp
        self._event_type = event_type
        self._meal_parent = meal_parent
        self._meal_category = meal_category
        self._meal_description = meal_description

    @classmethod
    def from_dict(cls, dikt) -> 'Meal':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Meal of this Meal.  # noqa: E501
        :rtype: Meal
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumable_type(self) -> str:
        """Gets the consumable_type of this Meal.


        :return: The consumable_type of this Meal.
        :rtype: str
        """
        return self._consumable_type

    @consumable_type.setter
    def consumable_type(self, consumable_type: str):
        """Sets the consumable_type of this Meal.


        :param consumable_type: The consumable_type of this Meal.
        :type consumable_type: str
        """

        self._consumable_type = consumable_type

    @property
    def consumable_added_fat(self) -> float:
        """Gets the consumable_added_fat of this Meal.


        :return: The consumable_added_fat of this Meal.
        :rtype: float
        """
        return self._consumable_added_fat

    @consumable_added_fat.setter
    def consumable_added_fat(self, consumable_added_fat: float):
        """Sets the consumable_added_fat of this Meal.


        :param consumable_added_fat: The consumable_added_fat of this Meal.
        :type consumable_added_fat: float
        """
        if consumable_added_fat is None:
            raise ValueError("Invalid value for `consumable_added_fat`, must not be `None`")  # noqa: E501

        self._consumable_added_fat = consumable_added_fat

    @property
    def consumable_carbohydrate(self) -> float:
        """Gets the consumable_carbohydrate of this Meal.

        quantity in [g] for 100g or 100mL  # noqa: E501

        :return: The consumable_carbohydrate of this Meal.
        :rtype: float
        """
        return self._consumable_carbohydrate

    @consumable_carbohydrate.setter
    def consumable_carbohydrate(self, consumable_carbohydrate: float):
        """Sets the consumable_carbohydrate of this Meal.

        quantity in [g] for 100g or 100mL  # noqa: E501

        :param consumable_carbohydrate: The consumable_carbohydrate of this Meal.
        :type consumable_carbohydrate: float
        """
        if consumable_carbohydrate is None:
            raise ValueError("Invalid value for `consumable_carbohydrate`, must not be `None`")  # noqa: E501

        self._consumable_carbohydrate = consumable_carbohydrate

    @property
    def consumable_quantity(self) -> float:
        """Gets the consumable_quantity of this Meal.

        quantity in [g] or [mL]  # noqa: E501

        :return: The consumable_quantity of this Meal.
        :rtype: float
        """
        return self._consumable_quantity

    @consumable_quantity.setter
    def consumable_quantity(self, consumable_quantity: float):
        """Sets the consumable_quantity of this Meal.

        quantity in [g] or [mL]  # noqa: E501

        :param consumable_quantity: The consumable_quantity of this Meal.
        :type consumable_quantity: float
        """

        self._consumable_quantity = consumable_quantity

    @property
    def element_type(self) -> str:
        """Gets the element_type of this Meal.


        :return: The element_type of this Meal.
        :rtype: str
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type: str):
        """Sets the element_type of this Meal.


        :param element_type: The element_type of this Meal.
        :type element_type: str
        """

        self._element_type = element_type

    @property
    def event_timestamp(self) -> datetime:
        """Gets the event_timestamp of this Meal.


        :return: The event_timestamp of this Meal.
        :rtype: datetime
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp: datetime):
        """Sets the event_timestamp of this Meal.


        :param event_timestamp: The event_timestamp of this Meal.
        :type event_timestamp: datetime
        """
        if event_timestamp is None:
            raise ValueError("Invalid value for `event_timestamp`, must not be `None`")  # noqa: E501

        self._event_timestamp = event_timestamp

    @property
    def event_type(self) -> str:
        """Gets the event_type of this Meal.


        :return: The event_type of this Meal.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str):
        """Sets the event_type of this Meal.


        :param event_type: The event_type of this Meal.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def meal_parent(self) -> str:
        """Gets the meal_parent of this Meal.


        :return: The meal_parent of this Meal.
        :rtype: str
        """
        return self._meal_parent

    @meal_parent.setter
    def meal_parent(self, meal_parent: str):
        """Sets the meal_parent of this Meal.


        :param meal_parent: The meal_parent of this Meal.
        :type meal_parent: str
        """
        if meal_parent is None:
            raise ValueError("Invalid value for `meal_parent`, must not be `None`")  # noqa: E501

        self._meal_parent = meal_parent

    @property
    def meal_category(self) -> str:
        """Gets the meal_category of this Meal.


        :return: The meal_category of this Meal.
        :rtype: str
        """
        return self._meal_category

    @meal_category.setter
    def meal_category(self, meal_category: str):
        """Sets the meal_category of this Meal.


        :param meal_category: The meal_category of this Meal.
        :type meal_category: str
        """
        allowed_values = ["composite", "dairy", "vegetable", "meat", "sauce", "cereal"]  # noqa: E501
        if meal_category not in allowed_values:
            raise ValueError(
                "Invalid value for `meal_category` ({0}), must be one of {1}"
                .format(meal_category, allowed_values)
            )

        self._meal_category = meal_category

    @property
    def meal_description(self) -> str:
        """Gets the meal_description of this Meal.


        :return: The meal_description of this Meal.
        :rtype: str
        """
        return self._meal_description

    @meal_description.setter
    def meal_description(self, meal_description: str):
        """Sets the meal_description of this Meal.


        :param meal_description: The meal_description of this Meal.
        :type meal_description: str
        """
        if meal_description is None:
            raise ValueError("Invalid value for `meal_description`, must not be `None`")  # noqa: E501

        self._meal_description = meal_description
